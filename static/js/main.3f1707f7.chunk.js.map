{"version":3,"sources":["components/countryDetails/CountryDetails.js","components/totalDetails/TotalDetails.js","components/selectCountry/SelectCountry.js","components/Dashboard/Dashboard.js","serviceWorker.js","index.js"],"names":["CountryDetails","props","Paper","className","elevation","details","country","active","recovered","cases","todayCases","deaths","todayDeaths","useStyles","makeStyles","theme","root","width","marginTop","spacing","TotalDetails","classes","useState","infected","setInfected","setRecovered","recoveryRatio","setRecoveryRatio","useEffect","allData","forEach","item","Skeleton","variant","LinearProgress","value","color","formControl","margin","minWidth","selectEmpty","SelectCountry","selectedCountry","setSelectedCountry","FormControl","InputLabel","id","Select","labelId","onChange","event","target","handleSelectedCountry","countries","map","countryData","index","MenuItem","key","defaultProps","Dashboard","countriesData","setCountriesData","getCountries","fetch","crossDomain","method","headers","then","response","json","res","sort","a","b","localeCompare","Container","fixed","data","Boolean","window","location","hostname","match","darkTheme","createMuiTheme","palette","type","primary","main","ReactDOM","render","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3f1707f7.chunk.js","sourcesContent":["import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport './CountryDetails.css'\n\nconst CountryDetails = props => {\n    return (\n        <Paper className='paperStyles' elevation={3}>\n            {props.details.country ? <h2>{props.details.country}</h2> : <h2>Country</h2>}\n            <p>Active: {props.details.active}</p>\n            <p>Recovered: {props.details.recovered}</p>\n            <p>Cases: {props.details.cases}</p>\n            {props.details.todayCases ? <p>Today cases: {props.details.todayCases}</p> : false}\n            <p>Deaths: {props.details.deaths}</p>\n            {props.details.todayDeaths ? <p>Today deaths: {props.details.todayDeaths}</p> : false}\n        </Paper>\n    );\n};\n\nexport default CountryDetails;\n","import React, {useState, useEffect} from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport './TotalDetails.css'\nimport {makeStyles} from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Skeleton from '@material-ui/lab/Skeleton';\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n        '& > * + *': {\n            marginTop: theme.spacing(2),\n        },\n    },\n}));\n\nconst TotalDetails = props => {\n    const classes = useStyles();\n    const [infected, setInfected] = useState(0);\n    const [recovered, setRecovered] = useState(0);\n    const [recoveryRatio, setRecoveryRatio] = useState(0);\n\n\n    useEffect(() => {\n        let infected = 0;\n        let recovered = 0;\n        props.allData.forEach((item) => {\n            infected += item.cases;\n            recovered += item.recovered;\n        });\n        setInfected(infected);\n        setRecovered(recovered);\n        setRecoveryRatio(recovered / infected * 100);\n    }, [props]);\n\n\n    return (\n        <Paper className='paperStyles' elevation={3}>\n            <h2>Recovery total ratio:</h2>\n            <div className='ratioFlex'>\n                {recovered ? <p>Recovered: {recovered}</p> : <Skeleton variant=\"text\" width={210}/>}\n                {infected ? <p>Infected: {infected}</p> : <Skeleton variant=\"text\" width={210}/>}\n            </div>\n            <div className={classes.root}>\n                <LinearProgress variant=\"determinate\" value={recoveryRatio} color=\"secondary\"/>\n            </div>\n        </Paper>\n    );\n};\n\nexport default TotalDetails;\n","import React, {useState} from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport {makeStyles} from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport './SelectCountry.css'\n\nconst useStyles = makeStyles(theme => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 250,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\nconst SelectCountry = props => {\n    const [selectedCountry, setSelectedCountry] = useState([]);\n\n    const classes = useStyles();\n\n    const handleChange = event => {\n        setSelectedCountry(event.target.value);\n        props.handleSelectedCountry(event.target.value);\n    };\n\n    return (\n        <Paper className='paperStyles' elevation={3}>\n            <div className='selectFlex'>\n                <FormControl className={classes.formControl}>\n                    <InputLabel id=\"demo-simple-select-label\">Select country</InputLabel>\n                    <Select\n                        labelId=\"demo-simple-select-label\"\n                        id=\"demo-simple-select\"\n                        value={selectedCountry}\n                        onChange={handleChange}\n                    >\n                        {props.countries.map((countryData, index) => (\n                            <MenuItem key={index} value={countryData}>{countryData.country}</MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n                <p>Select country to fill details below</p>\n            </div>\n        </Paper>\n    );\n};\n\nSelectCountry.defaultProps = {\n    countries: []\n};\n\nexport default SelectCountry;\n","import React, {useState, useEffect} from 'react';\nimport './Dashboard.css'\nimport Container from '@material-ui/core/Container';\nimport CountryDetails from \"../countryDetails/CountryDetails\";\nimport TotalDetails from \"../totalDetails/TotalDetails\";\nimport Paper from '@material-ui/core/Paper';\nimport SelectCountry from \"../selectCountry/SelectCountry\";\n\n\n\nconst Dashboard = () => {\n    const [countriesData, setCountriesData] = useState([]);\n    const [selectedCountry, setSelectedCountry] = useState([]);\n\n    useEffect(() => {\n        getCountries();\n    }, []);\n\n    const getCountries = () => {\n        fetch('https://corona.lmao.ninja/countries', {\n            crossDomain: true,\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        })\n            .then(response => response.json())\n            .then(res => {\n                setCountriesData(res.sort((a, b) => a.country.localeCompare(b.country)));\n            });\n    };\n\n    const handleSetSelectedCountry = data => {\n        setSelectedCountry(data);\n    };\n\n    return (\n        <div className='dashboard'>\n            <Container fixed>\n                <Paper className='paperStyles' elevation={3}>\n                    <h1>COVID-19 API Data</h1>\n                </Paper>\n                <div>\n                    <TotalDetails allData={countriesData}/>\n                </div>\n                <div>\n                    <SelectCountry countries={countriesData} handleSelectedCountry={handleSetSelectedCountry}/>\n                </div>\n                <div>\n                    <CountryDetails details={selectedCountry}/>\n                </div>\n\n            </Container>\n        </div>\n    );\n};\n\nexport default Dashboard;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Dashboard from './components/Dashboard/Dashboard';\nimport * as serviceWorker from './serviceWorker';\nimport {createMuiTheme} from '@material-ui/core/styles';\nimport {ThemeProvider} from '@material-ui/styles';\n\nconst darkTheme = createMuiTheme({\n    palette: {\n        type: 'dark',\n        primary: {\n            main: '#fff',\n        },\n    },\n});\n\nReactDOM.render(\n    <ThemeProvider theme={darkTheme}>\n        <Dashboard/>\n    </ThemeProvider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}